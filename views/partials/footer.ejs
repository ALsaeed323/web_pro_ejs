<footer class="text-center">Copyright Spring 2023 The Awesome SWE230</footer>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>

<script>
  const redirect = async (link) => {
    window.location.href = link;
  };
  const addToCartHandler = async (productId) => {
    const fet = await fetch("/cart/add", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ id: productId }),
    });

    if (fet.status === 200) {
      window.location.reload();
    }
  };
  // const signinHandler = async (e) => {
  //   e.preventDefault();
  //   const email = document.getElementById("signinEmail").value;
  //   const password = document.getElementById("signinPassword").value;
  //   const response = await fetch("/user/signin", {
  //     method: "POST",
  //     headers: {
  //       "Content-Type": "application/json",
  //     },
  //     body: JSON.stringify({ email, password }),
  //   });
  //   var emailInput = document.getElementById('signinEmail');
  //   var passwordInput = document.getElementById('signinPassword');
  //   var emailErrorMessage = document.getElementById('emailErrorMessage');
  //   var passwordErrorMessage = document.getElementById('passwordErrorMessage');
  //   // Validate email
  //   if (passwordInput.value != password.value) {
  //     document.getElementById('passwordErrorMessage').textContent = 'you have entered an invalid password';
  //     passwordInput.focus();
  //   }
  //   else  if (emailInput.value != email.value) {
  //     document.getElementById('emailErrorMessage').textContent = 'you have entered an invalide email';
  //     emailInput.focus();
  //   }
  
  //   if (response.status === 200) {
  //     window.location.href = "/";
  //   } else {
  //     const data = await response.json(); // extract the body data
  //     console.log(data);
  //     displayErrorMessage('emailErrorMessage', 'Invalid email');

  //   }
  // };
  const signinHandler = async (e) => {
  e.preventDefault();
  const emailInput = document.getElementById('signinEmail');
  const passwordInput = document.getElementById('signinPassword');
  const email = emailInput.value;
  const password = passwordInput.value;
  const response = await fetch('/user/signin', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ email, password }),
  });
  var emailErrorMessage = document.getElementById('emailErrorMessage');
  var passwordErrorMessage = document.getElementById('passwordErrorMessage');
    if (passwordInput.value !== password) {
    passwordErrorMessage.textContent = 'You have entered an invalid password';
    passwordInput.focus();
    return;
  } else if (emailInput.value !== email) {
    emailErrorMessage.textContent = 'You have entered an invalid email';
    emailInput.focus();
    return;
  }

  if (response.status === 200) {
    window.location.href = '/';
  } else {
    const data = await response.json(); // Extract the response body
    console.log(data);
    if (data.errorType === 'email') {
      emailErrorMessage.textContent = 'Invalid email';
      emailInput.focus();
    } else {
      passwordErrorMessage.textContent = 'Invalid password';
      passwordInput.focus();
    }
  }
};

  const signupHandler = async (e) => {
    e.preventDefault();
    clearErrorMessages();
    const name = document.getElementById("signupName").value;
    const email = document.getElementById("signupEmail").value;
    const password = document.getElementById("signupPassword").value;
    const confimPassword = document.getElementById(
      "signupConfirmPassword"
    ).value;
    const response = await fetch("/user/signup", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ name, email, password }),
    });
    if (password !== confimPassword) {
      displayErrorMessage('passwordErrorMessage', 'Password and Confirm Password do not match');
      return;
    }
    if (response.status === 200) {
      window.location.href = "/";
    } else if (response.status === 409) {
      displayErrorMessage('emailErrorMessage', 'ُEmail already exist');
    } else {
      const data = await response.json(); // extract the body data
      console.log(data);
      displayErrorMessage('emailErrorMessage', 'something went wrong');
    }
    var nameInput = document.getElementById('signupName');
    var emailInput = document.getElementById('signupEmail');
    var passwordInput = document.getElementById('signupPassword');
    var confirmPasswordInput = document.getElementById('signupConfirmPassword');

    // Validate name
    if (nameInput.value.trim() === '') {
      displayErrorMessage('nameError', 'Please enter your name.');
      nameInput.focus();
      return;
    }

    // Validate email
    if (emailInput.value.trim() === '') {
      displayErrorMessage('emailError', 'Please enter your email address.');
      emailInput.focus();
      return;
    }

    // Validate password
    if (passwordInput.value === '') {
      displayErrorMessage('passwordError', 'Please enter a password.');
      passwordInput.focus();
      return;
    }

    // Validate confirm password
    if (confirmPasswordInput.value === '') {
      displayErrorMessage('confirmPasswordError', 'Please confirm your password.');
      confirmPasswordInput.focus();
      return;
    }

    if (passwordInput.value !== confirmPasswordInput.value) {
      displayErrorMessage('confirmPasswordError', 'Password and confirm password do not match.');
      confirmPasswordInput.focus();
      return;
    }

    displaySuccessMessage('Form submitted successfully!');
  };
  const signoutHandler = (e) => {
    e.preventDefault();
    fetch("/user/logout", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    }).then((res) => {
      if (res.status === 200) {
        if (window.location.href === "/") {
          location.reload();
        }
        else {
          window.location.href = "/";
        }
      } else {
        console.log("Failed to sign out");
      }
    });
  };
  const searchHandler = (e) => {
    e.preventDefault();
    const q = document.getElementById("q").value;
    window.location.href = `/products/search?query=${q}`;
  };
  const shippingHandler = async (e) => {
    e.preventDefault();
    const data = {
      fullName: document.getElementById("shippingFullName").value,
      address: document.getElementById("shippingAddress").value,
      city: document.getElementById("shippingCity").value,
      postalCode: document.getElementById("shippingPostalCode").value,
      country: document.getElementById("shippingCountry").value,
    };
    const resposnce = await fetch("/user/shipping", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });
    redirect("/payment");
  };
  const paymentHandler = async (e) => {
    e.preventDefault();
    const data = {
      paymentMethod: document.getElementById("paymentForm").paymentMethod.value,
    };
    const resposnce = await fetch("/user/payment", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });
    redirect("/placeorder");
  };
  const placeOrderHandler = async (e) => {
    e.preventDefault();
    const data = {
      orderItems: cart,
      itemsPrice,
      shippingPrice,
      taxPrice,
      totalPrice,
      user,
    };
    const resposnce = await fetch("/orders", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });
    if (resposnce.status === 200) {
      const res = await resposnce.json();
      console.log(res);
      window.location.href = `/orders/${res.id}`;
    }
  };
  const profileHandler = async (e) => {
    e.preventDefault();
    const name = document.getElementById("profileName").value;
    const email = document.getElementById("profileEmail").value;
    const password = document.getElementById("profilePassword").value;
    const confimPassword = document.getElementById("profileConfirmPassword").value;
    if (password !== confimPassword) {
      displayErrorMessage('passwordErrorMessage', 'Password and Confirm Password do not match');
      return;
    }
    const data = { name, email, password };
    const resposnce = await fetch("/user/profile", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });
    window.location.href = `/`;
  };
  const deleteUserHandler = async (e, id) => {
    e.preventDefault();
    const resposnce = await fetch(`/admin/user/${id}`, {
      method: "DELETE",
    });
    if (resposnce.status === 200) {
      showMessage("User Deleted");
      window.location.reload();
    }
    else {
      showMessage("Something went wrong");

    }
  };
  const payOrder = async (id) => {
    const resposnce = await fetch(`/admin/order/${id}/pay`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    });
    if (resposnce.status === 200) {
      window.location.reload();
    }
  }
  const deliverOrder = async (id) => {
    const resposnce = await fetch(`/admin/order/${id}/deliver`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    });
    if (resposnce.status === 200) {
      window.location.reload();
    }
  }
  const deleteOrderHandler = async (e, id) => {
    e.preventDefault();
    const resposnce = await fetch(`/admin/order/${id}`, {
      method: "DELETE",
    });
    if (resposnce.status === 200) {
      window.location.reload();
    }
    else {
      alert("Something went wrong");
    }
  };
  const deleteImageHandler = async (e, id) => {
    e.preventDefault();
    const resposnce = await fetch(`/admin/product/${id}/image`, {
      method: "DELETE",
    });
    if (resposnce.status === 200) {
      window.location.reload();
    }
    else {
      alert("Something went wrong");
    }
  };
  const uploadPhotoHandler = (e, id) => {
    e.preventDefault();
    let formData = new FormData();
    formData.append('image', e.target.files[0]);
    fetch(`/admin/product/${id}`, {
      method: 'POST',
      body: formData
    })
      .then(response => response.json())
      .then(result => {
        window.location.reload();
      })
      .catch(error => {
        console.error('Error:', error);
      });
  }
  const deleteProductHandler = async (id) => {
    const resposnce = await fetch(`/admin/product/${id}`, {
      method: "DELETE",
    });
    if (resposnce.status === 200) {
      window.location.reload();
    }
    else {
      alert("Something went wrong");
    }
  };
  const updateProductHandler = async (e, id) => {
    e.preventDefault();
    const name = document.getElementById("updateProductName").value;
    const slug = document.getElementById("updateProductSlug").value;
    const price = document.getElementById("updateProductPrice").value;
    const brand = document.getElementById("updateProductBrand").value;
    const category = document.getElementById("updateProductCategory").value;
    const countInStock = document.getElementById("updateProductCountInStock").value;
    const description = document.getElementById("updateProductDescription").value;
    const data = { name, price, brand, category, countInStock, description, slug };
    const res = await fetch(`/admin/product/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    })
    console.log(res);
    if (res.status === 200) {
      redirect("/admin/products");
    }
    else {
      alert("Something went wrong");
    }
  }
</script>